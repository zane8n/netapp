# In /usr/local/bin/netsnmp

# --- Main Logic ---
main() {
    set -o pipefail

    # --- Robust Argument Parsing Loop ---
    # REFACTOR: This loop correctly handles flags and options, solving the bug
    # where '-v' was treated as a network.
    local ACTION=""
    local PATTERN=""
    local CUSTOM_NETWORKS=""
    local CUSTOM_COMMUNITIES=""
    local TEST_IP=""

    # If no args are given, default to help
    if [[ $# -eq 0 ]]; then
        show_help
        exit 0
    fi

    # First, find the main action (the first non-flag argument)
    for arg in "$@"; do
        if [[ ! "$arg" =~ ^- ]]; then
            ACTION="$arg"
            break
        fi
    done

    # If no action is found, it must be a command like --update.
    # The first argument is the most likely candidate.
    if [[ -z "$ACTION" ]]; then
        ACTION="$1"
    fi
    # If the action is not a known command, assume it's a search pattern.
    case "$ACTION" in
        --update|--discover-aps|--info|-i|--clear|-c|--wizard|--config|--help|-h|--version|--test-snmp)
            # This is a valid command, do nothing.
            ;;
        *)
            PATTERN="$ACTION"
            ACTION="search"
            ;;
    esac

    # Now, parse all arguments for flags and options
    while [[ $# -gt 0 ]]; do
        case "$1" in
            -S|--networks)
                CUSTOM_NETWORKS="$2"
                shift 2
                ;;
            -C|--communities)
                CUSTOM_COMMUNITIES="$2"
                shift 2
                ;;
            --test-snmp)
                TEST_IP="$2"
                shift 2
                ;;
            -v|--verbose)
                VERBOSE="true"
                shift
                ;;
            -vv|--debug)
                DEBUG="true"
                VERBOSE="true"
                set -x # Enable shell tracing
                shift
                ;;
            *)
                shift # Ignore known commands or the search pattern
                ;;
        esac
    done

    # --- Action Dispatch ---
    
    # Load config after parsing args so debug flags are set.
    load_config

    # Check for root privileges on actions that need it.
    case "$ACTION" in
        --update|--wizard|--discover-aps|--clear)
            if [[ $EUID -ne 0 ]]; then
                log_error "This command requires root privileges. Please run with 'sudo'."
                exit 1
            fi
            ;;
    esac

    case "$ACTION" in
        --update)
            # Pass custom networks if they were provided, otherwise the function will use the config.
            update_cache "$CUSTOM_NETWORKS" "$CUSTOM_COMMUNITIES"
            ;;
        search)
            search_cache "$PATTERN"
            ;;
        --test-snmp)
            test_snmp "$TEST_IP"
            ;;
        --config|--conf) # Added --conf as an alias
            show_config
            ;;
        # --- Other cases remain the same ---
        --discover-aps) update_ap_cache ;;
        -i|--info) show_info ;;
        -c|--clear) clear_cache ;;
        --wizard) run_config_wizard ;;
        -h|--help) show_help ;;
        --version) echo "NetSnmp v${VERSION}" ;;
        *)
            log_error "Unknown command or pattern: $ACTION"
            show_help
            exit 1
            ;;
    esac
}