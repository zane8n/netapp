#!/bin/bash
#
# NetSnmp - Network Device Discovery Tool
# Version: 2.1.0 (with Discovery)
#

# --- Bootstrap ---
SCRIPT_DIR=$(cd -- "$(dirname -- "${B_SOURCE[0]}")" &>/dev/null && pwd)
if [[ -d "/usr/local/lib/netsnmp" ]]; then LIB_DIR="/usr/local/lib/netsnmp";
elif [[ -d "${HOME}/.local/lib/netsnmp" ]]; then LIB_DIR="${HOME}/.local/lib/netsnmp";
elif [[ -d "${SCRIPT_DIR}/lib" ]]; then LIB_DIR="${SCRIPT_DIR}/lib";
else echo "ERROR: Could not find the library directory." >&2; exit 1; fi
export LIB_DIR
for lib_file in "${LIB_DIR}"/*.sh; do source "$lib_file"; done

# --- Main Execution Logic ---
main() {
    # If no arguments are provided, initialize and perform the default action.
    if [[ $# -eq 0 ]]; then
        core::init "$@"
        if cache::is_valid; then
            ui::print_info "All cached devices:"; cache::search "";
        else
            ui::show_help; ui::print_info "Run 'netsnmp --update' to begin.";
        fi
        return 0
    fi
    
    # --- Action-based Initialization ---
    # Each command now initializes the environment itself, ensuring it's always fresh.
    case "$1" in
        -h|--help) ui::show_help; exit 0 ;;
        --version) ui::show_version; exit 0 ;;
        --uninstall) ui::show_uninstall_instructions; exit 0 ;;
        
        # The wizard handles its own initialization.
        --wizard) ui::run_config_wizard; exit $? ;;

        # All other commands initialize the core system first.
        *)
            core::init "$@"
            local action="$1"; shift
            case "$action" in
                -u|--update) scan::update_cache ;;
                --update-incremental) scan::update_cache_incremental ;;
                -i|--info) cache::show_stats ;;
                -c|--clear) cache::clear ;;
                --config) core::show_config ;;
                --discover-aps) scan::update_ap_cache ;;
                --aps) cache::search_aps "$1" ;;
                --test-scan) scan::test_functionality ;;
                --test-snmp) discovery::test_snmp_connectivity "$1" ;;
                --test-ips) scan::test_ip_generation "$1" ;;
                -q|--quiet|-v|--verbose|-vv|--debug)
                    # Verbosity flags are handled by init, so if one is found,
                    # re-run the logic on the next argument.
                    main "$@"
                    ;;
                -*)
                    ui::print_error "Unknown option: $action"; ui::show_help; exit 1
                    ;;
                *)
                    # Default action is a search.
                    cache::search "$action"
                    ;;
            esac
            exit $?
            ;;
    esac
}

main "$@" || {
    exit_code=$?
    if [[ ${exit_code} -eq 126 ]] && [[ $EUID -ne 0 ]]; then
        echo ""
        ui::print_error "A permission error occurred. Some operations require root privileges."
        ui::print_info "Try running the command with 'sudo'."
    fi
    exit ${exit_code}
}