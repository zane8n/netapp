#!/bin/bash
#
# NetSnmp - Network Device Discovery Tool
# Version: 2.1.0 (with Discovery)
#

# --- Bootstrap ---
# (Bootstrap logic is unchanged)
SCRIPT_DIR=$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" &>/dev/null && pwd)
if [[ -d "/usr/local/lib/netsnmp" ]]; then LIB_DIR="/usr/local/lib/netsnmp";
elif [[ -d "${HOME}/.local/lib/netsnmp" ]]; then LIB_DIR="${HOME}/.local/lib/netsnmp";
elif [[ -d "${SCRIPT_DIR}/lib" ]]; then LIB_DIR="${SCRIPT_DIR}/lib";
else echo "ERROR: Could not find the library directory." >&2; exit 1; fi
for lib_file in "${LIB_DIR}"/*.sh; do source "$lib_file"; done

# --- Main Execution Logic ---
main() {
    core::init "$@"

    if [[ $# -eq 0 ]]; then
        if cache::is_valid; then
            ui::print_info "All cached devices:"; cache::search "";
        else
            ui::show_help; ui::print_info "Run 'netsnmp --update' to begin.";
        fi
        return 0
    fi
    
    while [[ $# -gt 0 ]]; do
        case "$1" in
            -h|--help) ui::show_help; exit 0 ;;
            -u|--update) scan::update_cache; exit $? ;;
            --update-incremental) scan::update_cache_incremental; exit $? ;;
            -i|--info) cache::show_stats; exit $? ;;
            -c|--clear) cache::clear; exit $? ;;
            -q|--quiet) shift ;;
            -v|--verbose) shift ;;
            -vv|--debug) set -x; shift ;;
            --wizard) ui::run_config_wizard; exit $? ;;
            --config) core::show_config; exit $? ;;
            --version) ui::show_version; exit 0 ;;
            --uninstall) ui::show_uninstall_instructions; exit 0 ;;
            
            # --- NEW DISCOVERY FLAGS ---
            --discover-aps) scan::update_ap_cache; exit $? ;;
            --aps) cache::search_aps "$2"; exit $? ;;
            
            # --- TEST FLAGS ---
            --test-scan) scan::test_functionality; exit $? ;;
            --test-snmp) discovery::test_snmp_connectivity "$2"; exit $? ;;
            --test-ips) scan::test_ip_generation "$2"; exit $? ;;

            -*) ui::print_error "Unknown option: $1"; ui::show_help; exit 1 ;;
            *) cache::search "$1"; exit $? ;;
        esac
    done
}

main "$@" || {
    exit_code=$?
    if [[ ${exit_code} -eq 126 ]] && [[ $EUID -ne 0 ]]; then
        echo ""
        ui::print_error "A permission error occurred. Some operations require root privileges."
        ui::print_info "Try running the command with 'sudo'."
    fi
    exit ${exit_code}
}