#!/bin/bash
#
# NetSnmp - Network Device Discovery Tool
# Version: 2.0.0
# Author: Network Tools Team (Refactored by Gemini)
# License: GPL-3.0
#

# --- Bootstrap ---
# Determine the script's library directory to source dependencies
# This allows the script to be run from any location.
SCRIPT_DIR=$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" &>/dev/null && pwd)
LIB_DIR=""

# Check for system-wide or user-local library paths
if [[ -d "/usr/local/lib/netsnmp" ]]; then
    LIB_DIR="/usr/local/lib/netsnmp"
elif [[ -d "${HOME}/.local/lib/netsnmp" ]]; then
    LIB_DIR="${HOME}/.local/lib/netsnmp"
elif [[ -d "${SCRIPT_DIR}/lib" ]]; then # Fallback to local dev structure
    LIB_DIR="${SCRIPT_DIR}/lib"
else
    echo "ERROR: Could not find the library directory. NetSnmp may not be installed correctly." >&2
    exit 1
fi

# Source all library files
for lib_file in "${LIB_DIR}"/*.sh; do
    # shellcheck source=/dev/null
    source "$lib_file"
done


# --- Main Execution Logic ---

main() {
    # Initialize core components (config, paths, logging)
    # This function is defined in lib/core.sh
    core::init

    # If no arguments are provided, check cache and show all devices or help
    if [[ $# -eq 0 ]]; then
        if cache::is_valid; then
            ui::print_info "All cached devices:"
            cache::search ""
        else
            ui::show_help
            ui::print_info "Cache is empty or stale. Run 'netsnmp --update' to scan the network."
        fi
        return 0
    fi
    
    # Simple argument parsing loop
    while [[ $# -gt 0 ]]; do
        case "$1" in
            -h|--help)
                ui::show_help
                exit 0
                ;;
            -u|--update)
                scan::update_cache
                exit $?
                ;;
            -i|--info|--cache-stats)
                cache::show_stats
                exit $?
                ;;
            -c|--clear)
                cache::clear
                exit $?
                ;;
            -q|--quiet)
                # This is handled by core::init setting a global var
                shift
                ;;
            -v|--verbose)
                # This is handled by core::init setting a global var
                shift
                ;;
            -vv|--debug)
                # This is handled by core::init setting a global var
                set -x
                shift
                ;;
            --wizard)
                ui::run_config_wizard
                exit $?
                ;;
            --config)
                core::show_config
                exit $?
                ;;
            --version)
                ui::show_version
                exit 0
                ;;
            --uninstall)
                ui::show_uninstall_instructions
                exit 0
                ;;
            *)
                # If no other command matched, assume it's a search pattern
                if cache::is_valid; then
                    cache::search "$1"
                    exit $?
                else
                    ui::print_error "Cache is empty or stale. Cannot perform search."
                    ui::print_info "Run 'netsnmp --update' to scan the network first."
                    exit 1
                fi
                ;;
        esac
    done
}

# Pass all command-line arguments to the main function
# Add error handling for permissions
main "$@" || {
    exit_code=$?
    if [[ ${exit_code} -eq 126 ]] && [[ $EUID -ne 0 ]]; then
        echo ""
        ui::print_error "A permission error occurred. Some operations require root privileges."
        ui::print_info "Try running the command with 'sudo'."
    fi
    exit ${exit_code}
}