#!/bin/bash
#
# NetSnmp v2.1 - Network Discovery Tool
#
# This is the main executable. It sources libraries, parses arguments,
# and dispatches actions to the appropriate functions.

VERSION="2.1.0-hotfix"

# --- Setup Environment ---
SCRIPT_DIR=$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" &>/dev/null && pwd)
LIB_DIR="/usr/local/lib/netsnmp"

CONF_DIR="/etc/netsnmp"
CACHE_DIR="/var/cache/netsnmp"
LOG_DIR="/var/log"

CONFIG_FILE="${CONF_DIR}/netsnmp.conf"
CACHE_FILE="${CACHE_DIR}/netsnmp.cache"
AP_CACHE_FILE="${CACHE_DIR}/netsnmp.aps.cache"
LOG_FILE="${LOG_DIR}/netsnmp.log"

# --- Source Libraries ---
if [[ ! -d "$LIB_DIR" ]]; then
    echo "ERROR: Library directory not found at '$LIB_DIR'." >&2
    echo "Please ensure NetSnmp is installed correctly." >&2
    exit 1
fi

for lib in "$LIB_DIR"/*.sh; do
    # shellcheck source=/dev/null
    source "$lib"
done


# --- Main Logic ---
main() {
    set -o pipefail
    
    # Load configuration first, so it's available for all actions
    # We load it early so the user sees errors if the config is missing.
    load_config

    # --- Argument Parsing ---
    if [[ $# -eq 0 ]]; then
        show_help
        exit 0
    fi

    local ACTION="$1"
    local PATTERN=""

    # Handle search as the default action if the first arg is not a flag
    if [[ ! "$ACTION" =~ ^- ]]; then
        PATTERN="$ACTION"
        ACTION="search"
        shift # Consume the pattern argument
    else
        shift # Consume the action/flag argument
    fi

    # Check for root privileges on actions that require them
    case "$ACTION" in
        --update|--wizard|--discover-aps|--clear)
            if [[ $EUID -ne 0 ]]; then
                log_error "This command requires root privileges. Please run with 'sudo'."
                exit 1
            fi
            ;;
    esac

    QUIET="false"
    DEBUG="false"

    case "$ACTION" in
        --update)
            update_cache "$@" # Pass remaining args for custom networks/communities
            ;;
        --discover-aps)
            update_ap_cache
            ;;
        search)
            if [[ -z "$PATTERN" ]]; then
                log_error "Please provide a pattern to search for."
                exit 1
            fi
            search_cache "$PATTERN"
            ;;
        -i|--info)
            show_info
            ;;
        -c|--clear)
            clear_cache
            ;;
        --wizard)
            run_config_wizard
            ;;
        --config)
            show_config
            ;;
        -h|--help)
            show_help
            ;;
        --version)
            echo "NetSnmp v${VERSION}"
            ;;
        --test-snmp)
            test_snmp "$1" # Pass the IP address to the function
            ;;
        *)
            log_error "Unknown command or option: $ACTION"
            show_help
            exit 1
            ;;
    esac
}

main "$@"